// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rmp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rmp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rmp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rmp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rmp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rmp_2eproto;
namespace rmp {
class bucket;
class bucketDefaultTypeInternal;
extern bucketDefaultTypeInternal _bucket_default_instance_;
class info;
class infoDefaultTypeInternal;
extern infoDefaultTypeInternal _info_default_instance_;
class record;
class recordDefaultTypeInternal;
extern recordDefaultTypeInternal _record_default_instance_;
class request;
class requestDefaultTypeInternal;
extern requestDefaultTypeInternal _request_default_instance_;
class response;
class responseDefaultTypeInternal;
extern responseDefaultTypeInternal _response_default_instance_;
}  // namespace rmp
PROTOBUF_NAMESPACE_OPEN
template<> ::rmp::bucket* Arena::CreateMaybeMessage<::rmp::bucket>(Arena*);
template<> ::rmp::info* Arena::CreateMaybeMessage<::rmp::info>(Arena*);
template<> ::rmp::record* Arena::CreateMaybeMessage<::rmp::record>(Arena*);
template<> ::rmp::request* Arena::CreateMaybeMessage<::rmp::request>(Arena*);
template<> ::rmp::response* Arena::CreateMaybeMessage<::rmp::response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace rmp {

enum command_codes : int {
  CREATE = 0,
  READ = 1,
  UPDATE = 2,
  DELETE = 3,
  command_codes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  command_codes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool command_codes_IsValid(int value);
constexpr command_codes command_codes_MIN = CREATE;
constexpr command_codes command_codes_MAX = DELETE;
constexpr int command_codes_ARRAYSIZE = command_codes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* command_codes_descriptor();
template<typename T>
inline const std::string& command_codes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, command_codes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function command_codes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    command_codes_descriptor(), enum_t_value);
}
inline bool command_codes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, command_codes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<command_codes>(
    command_codes_descriptor(), name, value);
}
enum status_codes : int {
  GOOD = 0,
  BAD = 1,
  status_codes_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  status_codes_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool status_codes_IsValid(int value);
constexpr status_codes status_codes_MIN = GOOD;
constexpr status_codes status_codes_MAX = BAD;
constexpr int status_codes_ARRAYSIZE = status_codes_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* status_codes_descriptor();
template<typename T>
inline const std::string& status_codes_Name(T enum_t_value) {
  static_assert(::std::is_same<T, status_codes>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function status_codes_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    status_codes_descriptor(), enum_t_value);
}
inline bool status_codes_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, status_codes* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<status_codes>(
    status_codes_descriptor(), name, value);
}
// ===================================================================

class info PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rmp.info) */ {
 public:
  inline info() : info(nullptr) {}
  virtual ~info();

  info(const info& from);
  info(info&& from) noexcept
    : info() {
    *this = ::std::move(from);
  }

  inline info& operator=(const info& from) {
    CopyFrom(from);
    return *this;
  }
  inline info& operator=(info&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const info& default_instance();

  static inline const info* internal_default_instance() {
    return reinterpret_cast<const info*>(
               &_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(info& a, info& b) {
    a.Swap(&b);
  }
  inline void Swap(info* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline info* New() const final {
    return CreateMaybeMessage<info>(nullptr);
  }

  info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<info>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const info& from);
  void MergeFrom(const info& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(info* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rmp.info";
  }
  protected:
  explicit info(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rmp_2eproto);
    return ::descriptor_table_rmp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPhoneFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string phone = 2;
  void clear_phone();
  const std::string& phone() const;
  void set_phone(const std::string& value);
  void set_phone(std::string&& value);
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  std::string* mutable_phone();
  std::string* release_phone();
  void set_allocated_phone(std::string* phone);
  private:
  const std::string& _internal_phone() const;
  void _internal_set_phone(const std::string& value);
  std::string* _internal_mutable_phone();
  public:

  // @@protoc_insertion_point(class_scope:rmp.info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phone_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rmp_2eproto;
};
// -------------------------------------------------------------------

class record PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rmp.record) */ {
 public:
  inline record() : record(nullptr) {}
  virtual ~record();

  record(const record& from);
  record(record&& from) noexcept
    : record() {
    *this = ::std::move(from);
  }

  inline record& operator=(const record& from) {
    CopyFrom(from);
    return *this;
  }
  inline record& operator=(record&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const record& default_instance();

  static inline const record* internal_default_instance() {
    return reinterpret_cast<const record*>(
               &_record_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(record& a, record& b) {
    a.Swap(&b);
  }
  inline void Swap(record* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(record* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline record* New() const final {
    return CreateMaybeMessage<record>(nullptr);
  }

  record* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<record>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const record& from);
  void MergeFrom(const record& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(record* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rmp.record";
  }
  protected:
  explicit record(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rmp_2eproto);
    return ::descriptor_table_rmp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 1,
    kContactFieldNumber = 2,
  };
  // string email = 1;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // .rmp.info contact = 2;
  bool has_contact() const;
  private:
  bool _internal_has_contact() const;
  public:
  void clear_contact();
  const ::rmp::info& contact() const;
  ::rmp::info* release_contact();
  ::rmp::info* mutable_contact();
  void set_allocated_contact(::rmp::info* contact);
  private:
  const ::rmp::info& _internal_contact() const;
  ::rmp::info* _internal_mutable_contact();
  public:
  void unsafe_arena_set_allocated_contact(
      ::rmp::info* contact);
  ::rmp::info* unsafe_arena_release_contact();

  // @@protoc_insertion_point(class_scope:rmp.record)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::rmp::info* contact_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rmp_2eproto;
};
// -------------------------------------------------------------------

class bucket PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rmp.bucket) */ {
 public:
  inline bucket() : bucket(nullptr) {}
  virtual ~bucket();

  bucket(const bucket& from);
  bucket(bucket&& from) noexcept
    : bucket() {
    *this = ::std::move(from);
  }

  inline bucket& operator=(const bucket& from) {
    CopyFrom(from);
    return *this;
  }
  inline bucket& operator=(bucket&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bucket& default_instance();

  static inline const bucket* internal_default_instance() {
    return reinterpret_cast<const bucket*>(
               &_bucket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(bucket& a, bucket& b) {
    a.Swap(&b);
  }
  inline void Swap(bucket* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bucket* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bucket* New() const final {
    return CreateMaybeMessage<bucket>(nullptr);
  }

  bucket* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bucket>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bucket& from);
  void MergeFrom(const bucket& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bucket* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rmp.bucket";
  }
  protected:
  explicit bucket(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rmp_2eproto);
    return ::descriptor_table_rmp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordsFieldNumber = 1,
  };
  // repeated .rmp.record records = 1;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::rmp::record* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rmp::record >*
      mutable_records();
  private:
  const ::rmp::record& _internal_records(int index) const;
  ::rmp::record* _internal_add_records();
  public:
  const ::rmp::record& records(int index) const;
  ::rmp::record* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rmp::record >&
      records() const;

  // @@protoc_insertion_point(class_scope:rmp.bucket)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rmp::record > records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rmp_2eproto;
};
// -------------------------------------------------------------------

class request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rmp.request) */ {
 public:
  inline request() : request(nullptr) {}
  virtual ~request();

  request(const request& from);
  request(request&& from) noexcept
    : request() {
    *this = ::std::move(from);
  }

  inline request& operator=(const request& from) {
    CopyFrom(from);
    return *this;
  }
  inline request& operator=(request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const request& default_instance();

  static inline const request* internal_default_instance() {
    return reinterpret_cast<const request*>(
               &_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(request& a, request& b) {
    a.Swap(&b);
  }
  inline void Swap(request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline request* New() const final {
    return CreateMaybeMessage<request>(nullptr);
  }

  request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const request& from);
  void MergeFrom(const request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rmp.request";
  }
  protected:
  explicit request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rmp_2eproto);
    return ::descriptor_table_rmp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kCommandFieldNumber = 1,
  };
  // .rmp.record payload = 2;
  bool has_payload() const;
  private:
  bool _internal_has_payload() const;
  public:
  void clear_payload();
  const ::rmp::record& payload() const;
  ::rmp::record* release_payload();
  ::rmp::record* mutable_payload();
  void set_allocated_payload(::rmp::record* payload);
  private:
  const ::rmp::record& _internal_payload() const;
  ::rmp::record* _internal_mutable_payload();
  public:
  void unsafe_arena_set_allocated_payload(
      ::rmp::record* payload);
  ::rmp::record* unsafe_arena_release_payload();

  // uint32 command = 1;
  void clear_command();
  ::PROTOBUF_NAMESPACE_ID::uint32 command() const;
  void set_command(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_command() const;
  void _internal_set_command(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rmp.request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::rmp::record* payload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rmp_2eproto;
};
// -------------------------------------------------------------------

class response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:rmp.response) */ {
 public:
  inline response() : response(nullptr) {}
  virtual ~response();

  response(const response& from);
  response(response&& from) noexcept
    : response() {
    *this = ::std::move(from);
  }

  inline response& operator=(const response& from) {
    CopyFrom(from);
    return *this;
  }
  inline response& operator=(response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const response& default_instance();

  static inline const response* internal_default_instance() {
    return reinterpret_cast<const response*>(
               &_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(response& a, response& b) {
    a.Swap(&b);
  }
  inline void Swap(response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline response* New() const final {
    return CreateMaybeMessage<response>(nullptr);
  }

  response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const response& from);
  void MergeFrom(const response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "rmp.response";
  }
  protected:
  explicit response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rmp_2eproto);
    return ::descriptor_table_rmp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // string payload = 2;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const char* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint32 status = 1;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:rmp.response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rmp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// info

// string name = 1;
inline void info::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& info::name() const {
  // @@protoc_insertion_point(field_get:rmp.info.name)
  return _internal_name();
}
inline void info::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:rmp.info.name)
}
inline std::string* info::mutable_name() {
  // @@protoc_insertion_point(field_mutable:rmp.info.name)
  return _internal_mutable_name();
}
inline const std::string& info::_internal_name() const {
  return name_.Get();
}
inline void info::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void info::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rmp.info.name)
}
inline void info::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rmp.info.name)
}
inline void info::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rmp.info.name)
}
inline std::string* info::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* info::release_name() {
  // @@protoc_insertion_point(field_release:rmp.info.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void info::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rmp.info.name)
}

// string phone = 2;
inline void info::clear_phone() {
  phone_.ClearToEmpty();
}
inline const std::string& info::phone() const {
  // @@protoc_insertion_point(field_get:rmp.info.phone)
  return _internal_phone();
}
inline void info::set_phone(const std::string& value) {
  _internal_set_phone(value);
  // @@protoc_insertion_point(field_set:rmp.info.phone)
}
inline std::string* info::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:rmp.info.phone)
  return _internal_mutable_phone();
}
inline const std::string& info::_internal_phone() const {
  return phone_.Get();
}
inline void info::_internal_set_phone(const std::string& value) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void info::set_phone(std::string&& value) {
  
  phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rmp.info.phone)
}
inline void info::set_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rmp.info.phone)
}
inline void info::set_phone(const char* value,
    size_t size) {
  
  phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rmp.info.phone)
}
inline std::string* info::_internal_mutable_phone() {
  
  return phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* info::release_phone() {
  // @@protoc_insertion_point(field_release:rmp.info.phone)
  return phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void info::set_allocated_phone(std::string* phone) {
  if (phone != nullptr) {
    
  } else {
    
  }
  phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rmp.info.phone)
}

// -------------------------------------------------------------------

// record

// string email = 1;
inline void record::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& record::email() const {
  // @@protoc_insertion_point(field_get:rmp.record.email)
  return _internal_email();
}
inline void record::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:rmp.record.email)
}
inline std::string* record::mutable_email() {
  // @@protoc_insertion_point(field_mutable:rmp.record.email)
  return _internal_mutable_email();
}
inline const std::string& record::_internal_email() const {
  return email_.Get();
}
inline void record::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void record::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rmp.record.email)
}
inline void record::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rmp.record.email)
}
inline void record::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rmp.record.email)
}
inline std::string* record::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* record::release_email() {
  // @@protoc_insertion_point(field_release:rmp.record.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void record::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rmp.record.email)
}

// .rmp.info contact = 2;
inline bool record::_internal_has_contact() const {
  return this != internal_default_instance() && contact_ != nullptr;
}
inline bool record::has_contact() const {
  return _internal_has_contact();
}
inline void record::clear_contact() {
  if (GetArena() == nullptr && contact_ != nullptr) {
    delete contact_;
  }
  contact_ = nullptr;
}
inline const ::rmp::info& record::_internal_contact() const {
  const ::rmp::info* p = contact_;
  return p != nullptr ? *p : reinterpret_cast<const ::rmp::info&>(
      ::rmp::_info_default_instance_);
}
inline const ::rmp::info& record::contact() const {
  // @@protoc_insertion_point(field_get:rmp.record.contact)
  return _internal_contact();
}
inline void record::unsafe_arena_set_allocated_contact(
    ::rmp::info* contact) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contact_);
  }
  contact_ = contact;
  if (contact) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rmp.record.contact)
}
inline ::rmp::info* record::release_contact() {
  
  ::rmp::info* temp = contact_;
  contact_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::rmp::info* record::unsafe_arena_release_contact() {
  // @@protoc_insertion_point(field_release:rmp.record.contact)
  
  ::rmp::info* temp = contact_;
  contact_ = nullptr;
  return temp;
}
inline ::rmp::info* record::_internal_mutable_contact() {
  
  if (contact_ == nullptr) {
    auto* p = CreateMaybeMessage<::rmp::info>(GetArena());
    contact_ = p;
  }
  return contact_;
}
inline ::rmp::info* record::mutable_contact() {
  // @@protoc_insertion_point(field_mutable:rmp.record.contact)
  return _internal_mutable_contact();
}
inline void record::set_allocated_contact(::rmp::info* contact) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete contact_;
  }
  if (contact) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(contact);
    if (message_arena != submessage_arena) {
      contact = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contact, submessage_arena);
    }
    
  } else {
    
  }
  contact_ = contact;
  // @@protoc_insertion_point(field_set_allocated:rmp.record.contact)
}

// -------------------------------------------------------------------

// bucket

// repeated .rmp.record records = 1;
inline int bucket::_internal_records_size() const {
  return records_.size();
}
inline int bucket::records_size() const {
  return _internal_records_size();
}
inline void bucket::clear_records() {
  records_.Clear();
}
inline ::rmp::record* bucket::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:rmp.bucket.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rmp::record >*
bucket::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:rmp.bucket.records)
  return &records_;
}
inline const ::rmp::record& bucket::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::rmp::record& bucket::records(int index) const {
  // @@protoc_insertion_point(field_get:rmp.bucket.records)
  return _internal_records(index);
}
inline ::rmp::record* bucket::_internal_add_records() {
  return records_.Add();
}
inline ::rmp::record* bucket::add_records() {
  // @@protoc_insertion_point(field_add:rmp.bucket.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::rmp::record >&
bucket::records() const {
  // @@protoc_insertion_point(field_list:rmp.bucket.records)
  return records_;
}

// -------------------------------------------------------------------

// request

// uint32 command = 1;
inline void request::clear_command() {
  command_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 request::_internal_command() const {
  return command_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 request::command() const {
  // @@protoc_insertion_point(field_get:rmp.request.command)
  return _internal_command();
}
inline void request::_internal_set_command(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  command_ = value;
}
inline void request::set_command(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_command(value);
  // @@protoc_insertion_point(field_set:rmp.request.command)
}

// .rmp.record payload = 2;
inline bool request::_internal_has_payload() const {
  return this != internal_default_instance() && payload_ != nullptr;
}
inline bool request::has_payload() const {
  return _internal_has_payload();
}
inline void request::clear_payload() {
  if (GetArena() == nullptr && payload_ != nullptr) {
    delete payload_;
  }
  payload_ = nullptr;
}
inline const ::rmp::record& request::_internal_payload() const {
  const ::rmp::record* p = payload_;
  return p != nullptr ? *p : reinterpret_cast<const ::rmp::record&>(
      ::rmp::_record_default_instance_);
}
inline const ::rmp::record& request::payload() const {
  // @@protoc_insertion_point(field_get:rmp.request.payload)
  return _internal_payload();
}
inline void request::unsafe_arena_set_allocated_payload(
    ::rmp::record* payload) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payload_);
  }
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:rmp.request.payload)
}
inline ::rmp::record* request::release_payload() {
  
  ::rmp::record* temp = payload_;
  payload_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::rmp::record* request::unsafe_arena_release_payload() {
  // @@protoc_insertion_point(field_release:rmp.request.payload)
  
  ::rmp::record* temp = payload_;
  payload_ = nullptr;
  return temp;
}
inline ::rmp::record* request::_internal_mutable_payload() {
  
  if (payload_ == nullptr) {
    auto* p = CreateMaybeMessage<::rmp::record>(GetArena());
    payload_ = p;
  }
  return payload_;
}
inline ::rmp::record* request::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:rmp.request.payload)
  return _internal_mutable_payload();
}
inline void request::set_allocated_payload(::rmp::record* payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete payload_;
  }
  if (payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(payload);
    if (message_arena != submessage_arena) {
      payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payload, submessage_arena);
    }
    
  } else {
    
  }
  payload_ = payload;
  // @@protoc_insertion_point(field_set_allocated:rmp.request.payload)
}

// -------------------------------------------------------------------

// response

// uint32 status = 1;
inline void response::clear_status() {
  status_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 response::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 response::status() const {
  // @@protoc_insertion_point(field_get:rmp.response.status)
  return _internal_status();
}
inline void response::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  status_ = value;
}
inline void response::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:rmp.response.status)
}

// string payload = 2;
inline void response::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& response::payload() const {
  // @@protoc_insertion_point(field_get:rmp.response.payload)
  return _internal_payload();
}
inline void response::set_payload(const std::string& value) {
  _internal_set_payload(value);
  // @@protoc_insertion_point(field_set:rmp.response.payload)
}
inline std::string* response::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:rmp.response.payload)
  return _internal_mutable_payload();
}
inline const std::string& response::_internal_payload() const {
  return payload_.Get();
}
inline void response::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void response::set_payload(std::string&& value) {
  
  payload_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:rmp.response.payload)
}
inline void response::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:rmp.response.payload)
}
inline void response::set_payload(const char* value,
    size_t size) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:rmp.response.payload)
}
inline std::string* response::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* response::release_payload() {
  // @@protoc_insertion_point(field_release:rmp.response.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void response::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:rmp.response.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rmp

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::rmp::command_codes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rmp::command_codes>() {
  return ::rmp::command_codes_descriptor();
}
template <> struct is_proto_enum< ::rmp::status_codes> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rmp::status_codes>() {
  return ::rmp::status_codes_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rmp_2eproto
